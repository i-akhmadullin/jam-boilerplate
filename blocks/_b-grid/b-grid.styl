@import '../config';

.b-grid {
    width: gridContainerWidth;
    margin-left: auto;
    margin-right: auto;
    padding: gridContainerPadding;
    *zoom: 1;
}

.b-grid_type_fluid {
    width: 100%;
    min-width: fluidGridContainerMinWidth;
    max-width: fluidGridContainerMaxWidth;
}



.b-grid:before, .b-grid:after {
    display: table;
    content: "";
}

.b-grid:after {
    clear: both;
}

.b-grid__row {
    width: 100%;
    *zoom: 1;
}

.b-grid__row:before, .b-grid__row:after {
    display: table;
    content: "";
}

.b-grid__row:after {
    clear: both;
}

.b-grid__column {
    float: left;
    margin-left: gridGutterWidth;
}

.b-grid_type_fluid .b-grid__column {
    margin-left: unit(fluidGridGutterWidth, "%");
}

.b-grid__column:first-child {
    margin-left: 0;
}

spanGenerator(columns)

    for N in 1..(columns)

        columnName = '.b-grid__column_size_' + N;
        {columnName} {
            width: gridColumnWidth * N + gridGutterWidth * ( N - 1 );
        }

    for N in 1..(columns - 1)

        offsetName = '.b-grid__offset_size_' + N;
        {offsetName} {
            margin-left: gridColumnWidth * N + gridGutterWidth * ( N + 1 );
        }

    for N in 1..(columns)

        fluidColumnName = '.b-grid_type_fluid .b-grid__column_size_' + N;
        {fluidColumnName} {
            width: unit((fluidGridColumnWidth * N + fluidGridGutterWidth * ( N - 1 )), "%");
            *width: unit((fluidGridColumnWidth * N + fluidGridGutterWidth * ( N - 1 ) - (.5 / gridContainerWidth * 100)), "%");
        }

    for N in 1..(columns - 1)

        fluidOffsetName = '.b-grid_type_fluid .b-grid__offset_size_' + N;
        {fluidOffsetName} {
            margin-left: unit((fluidGridColumnWidth * N + fluidGridGutterWidth * ( N + 1 )), "%");
            *margin-left: unit((fluidGridColumnWidth * N + fluidGridGutterWidth * ( N + 1 ) - (.5 / gridContainerWidth * 100)), "%");
        }

spanGenerator(gridColumns)